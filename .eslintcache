[{"C:\\Users\\binap\\Documents\\React\\confusion\\src\\index.js":"1","C:\\Users\\binap\\Documents\\React\\confusion\\src\\reportWebVitals.js":"2","C:\\Users\\binap\\Documents\\React\\confusion\\src\\App.js":"3","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\MenuComponent.js":"4","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\dishes.js":"5","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\DishdetailComponent.js":"6","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\MainComponent.js":"7","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\HeaderComponent.js":"8","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\FooterComponent.js":"9","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\HomeComponent.js":"10","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\ContactComponent.js":"11","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\comments.js":"12","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\leaders.js":"13","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\promotions.js":"14","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\AboutComponent.js":"15","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\configureStore.js":"16","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\leaders.js":"17","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\dishes.js":"18","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\promotions.js":"19","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\comments.js":"20"},{"size":808,"mtime":1608492901881,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"23","hashOfConfig":"22"},{"size":541,"mtime":1610254834842,"results":"24","hashOfConfig":"22"},{"size":2246,"mtime":1608596917005,"results":"25","hashOfConfig":"22"},{"size":1490,"mtime":1608517792705,"results":"26","hashOfConfig":"22"},{"size":7577,"mtime":1610679715665,"results":"27","hashOfConfig":"22"},{"size":2060,"mtime":1610255057927,"results":"28","hashOfConfig":"22"},{"size":5328,"mtime":1610404110494,"results":"29","hashOfConfig":"22"},{"size":2707,"mtime":1608492937550,"results":"30","hashOfConfig":"22"},{"size":1767,"mtime":1608521110514,"results":"31","hashOfConfig":"22"},{"size":10473,"mtime":1610398835448,"results":"32","hashOfConfig":"22"},{"size":4310,"mtime":1608517960731,"results":"33","hashOfConfig":"22"},{"size":2382,"mtime":1608518105264,"results":"34","hashOfConfig":"22"},{"size":465,"mtime":1608518075218,"results":"35","hashOfConfig":"22"},{"size":4411,"mtime":1609447482203,"results":"36","hashOfConfig":"22"},{"size":484,"mtime":1610679943618,"results":"37","hashOfConfig":"22"},{"size":187,"mtime":1610679149880,"results":"38","hashOfConfig":"22"},{"size":179,"mtime":1610678823575,"results":"39","hashOfConfig":"22"},{"size":195,"mtime":1610678428818,"results":"40","hashOfConfig":"22"},{"size":187,"mtime":1610678275787,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"nwyqho",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"C:\\Users\\binap\\Documents\\React\\confusion\\src\\index.js",[],["88","89"],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\reportWebVitals.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\App.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\MenuComponent.js",["90","91"],"import React,{} from 'react';\r\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n    function RenderMenuItem({ dish, onClick }){\r\n\r\n        return(\r\n            <Card>      \r\n                {/* 'back quat used */}\r\n                <Link to = {`/menu/${dish.id}`} > \r\n                <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\r\n                <CardImgOverlay>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                </CardImgOverlay>                                    \r\n                </Link>\r\n            </Card>\r\n        );\r\n    }  \r\n\r\n    const Menu = (props) => {\r\n\r\n        const menu = props.dishes.map((dish) => {\r\n            return (\r\n                <div key={dish.id} className=\"col-12 col-md-5 m-1\">\r\n                    <RenderMenuItem dish={dish} />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        console.log('Menu Component render is invonked');\r\n\r\n        return ( \r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                    <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>Menu</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Menu</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {menu}\r\n                </div>\r\n                              \r\n            </div>\r\n        );        \r\n    }\r\n     \r\n// applying router\r\n//    function RenderMenuItem({ dish, onClick}){\r\n//       <Card onClick={() => onClick(dish.id)}>      \r\n    \r\n//Changing into functional component\r\n//class Menu extends Component {\r\n    // componentDidMount(){\r\n    //     console.log('Menu Component componentDidMount invoked')\r\n    // }\r\n    // constructor(props){\r\n    //     super(props);\r\n\r\n    //     console.log('Menu Componenet constructor is invonked');\r\n    // }\r\n   \r\n    //render(){\r\n\r\n    //}\r\n//}\r\n\r\nexport default Menu;","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\dishes.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\DishdetailComponent.js",["92","93","94","95","96"],"import React, { Component } from 'react';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, \r\n    Modal, ModalBody, ModalHeader,\r\n    Button, Row, Label, Input, Col, BreadcrumbItem, Breadcrumb } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\n\r\nclass CommentForm extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = { isModalOpen: false };\r\n\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({ isModalOpen: !this.state.isModalOpen });\r\n    }\r\n\r\n    handleSubmit(values){\r\n        this.toggleModal();\r\n\r\n        console.log('comment:', values);\r\n        alert('comment:' + JSON.stringify(values));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <Button outline onClick={this.toggleModal}>\r\n                <span className=\"fa fa-pencil\" /> Submit Comment\r\n            </Button>\r\n            <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                <ModalBody>\r\n                <LocalForm onSubmit={this.handleSubmit}>\r\n                    <Row className=\"form-group\">\r\n                    <Label htmlFor=\"rating\" md={12}>\r\n                        Rating\r\n                    </Label>\r\n                    <Col md={{ size: 12 }}>\r\n                        <Control.select\r\n                        model=\".rating\"\r\n                        name=\"rating\"\r\n                        className=\"form-control\"\r\n                    >\r\n                        <option>1</option>\r\n                        <option>2</option>\r\n                        <option>3</option>\r\n                        <option>4</option>\r\n                        <option>5</option>\r\n                    </Control.select>\r\n                    </Col>\r\n                    </Row>\r\n                    <Row className=\"form-group\">\r\n                    <Label htmlFor=\"author\" md={12}>\r\n                        Your Name\r\n                    </Label>\r\n                    <Col md={12}>\r\n                        <Control.text\r\n                        model=\".author\"\r\n                        id=\"author\"\r\n                        name=\"author\"\r\n                        placeholder=\"Your Name\"\r\n                        className=\"form-control\"\r\n                        validators={{\r\n                            required,\r\n                            minLength: minLength(3),\r\n                            maxLength: maxLength(15)\r\n                        }}\r\n                    />\r\n                    <Errors\r\n                        className=\"text-danger\"\r\n                        model=\".author\"\r\n                        show=\"touched\"\r\n                        messages={{\r\n                            required: \"Required\",\r\n                            minLength: \"Must be greater than 2 characters\",\r\n                            maxLength: \"Must be 15 characters or less\"\r\n                        }}\r\n                    />\r\n                    </Col>\r\n                    </Row>\r\n                    <Row className=\"form-group\">\r\n                    <Label htmlFor=\"comment\" md={12}>\r\n                        Comment\r\n                    </Label>\r\n                    <Col md={12}>\r\n                    <Control.textarea\r\n                        model=\".comment\"\r\n                        id=\"comment\"\r\n                        name=\"comment\"\r\n                        rows={5}\r\n                        className=\"form-control\"\r\n                    />\r\n                    </Col>\r\n                    </Row>\r\n                        <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                            Submit\r\n                        </Button>\r\n                </LocalForm>\r\n            </ModalBody>\r\n            </Modal>\r\n        </div>\r\n        );\r\n        }\r\n    }    \r\n\r\n    function RenderDish({ dish }) {\r\n        return (\r\n            <div className=\"col-12 col-md-5 m-1\">\r\n            <Card>\r\n                <CardImg top src={dish.image} alt={dish.name} />\r\n                <CardBody>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                    <CardText>{dish.description}</CardText>\r\n                </CardBody>\r\n            </Card>\r\n            </div>\r\n        );\r\n    }    \r\n    \r\n    // function RenderComments({ comments }) {\r\n    //     if (comments != null) {\r\n    //         return (\r\n    //         <div className=\"col-12 col-md-5 m-1\">\r\n    //             <h4>Comments</h4>\r\n    //             {comments.map(comment => (\r\n    //             <ul key={comment.id} className=\"list-unstyled\">\r\n    //                 <li className=\"mb-2\">{comment.comment}</li>\r\n    //                 <li>\r\n    //                 -- {comment.author}{\" \"}\r\n    //                 {new Intl.DateTimeFormat(\"en-US\", {\r\n    //                     year: \"numeric\",\r\n    //                     month: \"short\",\r\n    //                     day: \"2-digit\"\r\n    //                 }).format(new Date(Date.parse(comment.date)))}\r\n    //                 </li>\r\n    //             </ul>\r\n    //             ))}\r\n    //             <CommentForm />\r\n    //         </div>\r\n    //         );\r\n    //     } else \r\n    //         return \r\n    //         <div></div>\r\n    // } \r\n\r\n    \r\n    function RenderComments({comments}) {\r\n        var commentList = comments.map(comment => {\r\n            return (\r\n                <li key={comment.id} >\r\n                    {comment.comment}\r\n                    <br /><br />\r\n                    -- {comment.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse(comment.date)))}\r\n                    <br /><br />\r\n                </li>\r\n            );\r\n        });\r\n        return (\r\n            <div>\r\n                <h4>Comments</h4>\r\n                <ul className=\"list-unstyled\">\r\n                    {commentList}\r\n                </ul>\r\n                <CommentForm />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    const DishDetail = (props) => {\r\n        if (props.dish != null)\r\n        return(\r\n            <div class=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <RenderDish dish={props.dish} />\r\n                    <RenderComments comments={props.comments} />\r\n                </div>    \r\n            </div>\r\n        );\r\n        else\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n\r\n    const formatDate = (date) => {\r\n        const option = {year: 'numeric', month: 'short', day: 'numeric' };\r\n        const dateD = new Date(date)\r\n        const newDate = dateD.toLocaleDateString(\"en-US\", option)\r\n        return newDate;\r\n    }\r\n\r\n    export default DishDetail;\r\n\r\n","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\MainComponent.js",["97","98","99"],"import { Component } from 'react';\r\nimport Home from './HomeComponent';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport { Navbar, NavbarBrand } from 'reactstrap';\r\nimport Menu from './MenuComponent';\r\nimport Contact from './ContactComponent';\r\nimport DishDetail from './DishdetailComponent'\r\nimport About from './AboutComponent';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    dishes: state.dishes,\r\n    comments: state.comments,\r\n    promotions: state.promotions,\r\n    leaders: state.leaders\r\n  }\r\n}\r\n\r\nclass Main extends Component {\r\n\r\n  constructor(props){\r\n    super(props);    \r\n  }  \r\n\r\n  render(){\r\n    const HomePage = () =>{\r\n      return(\r\n          <Home \r\n              dish={this.props.dishes.filter((dish) => dish.featured)[0]}\r\n              promotion={this.props.promotions.filter((promo) => promo.featured)[0]}\r\n              leader={this.props.leaders.filter((leader) => leader.featured)[0]}\r\n          />\r\n      );\r\n    }\r\n\r\n    const DishWithID = ({match}) => {\r\n      return(\r\n        <DishDetail dish = {this.props.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]}\r\n        comments = {this.props.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))[0]}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <Header />\r\n          <Switch>\r\n            <Route path = \"/home\" component={HomePage} />\r\n            <Route path = \"/aboutus\" component={() => <About leaders={this.props.leaders} />} />\r\n            <Route exact path = \"/menu\" component={() => <Menu dishes={this.props.dishes} />} />\r\n            <Route path = \"/menu/:dishId\" component={DishWithID} />\r\n            <Route exact path = \"/contactus\" component={Contact} />\r\n            <Redirect to = \"/home\" />\r\n          </Switch>        \r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(Main));","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\HeaderComponent.js",["100"],"import React, { Component} from 'react';\r\nimport { Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem, Jumbotron,\r\n    Button, Modal, ModalHeader, ModalBody,\r\n    Form, FormGroup, Input, Label} from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n\r\n    constructor(props){\r\n        \r\n        super(props);\r\n        this.state ={\r\n            isNavOpen: false,\r\n            isModalOpen: false\r\n        };\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n    }\r\n\r\n    toggleNav(){\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    toggleModal(){\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleLogin(event) {\r\n        this.toggleModal();\r\n        alert(\"Username: \" + this.username.value + \" Password: \" + this.password.value\r\n            + \" Remember: \" + this.remember.checked);\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n            <Navbar dark expand=\"md\">\r\n                <div className=\"container\">\r\n                    <NavbarToggler onClick={this.toggleNav} />\r\n\r\n                    <NavbarBrand className =\"mr-auto\" href=\"/\">\r\n                        <img src = \"assets/images/logo.png\" height=\"30\" width=\"41\"\r\n                            atl=\"Ristorante Con Fusion\" />\r\n                    </NavbarBrand>\r\n\r\n                    <Collapse isOpen={this.state.isNavOpen} navbar>\r\n                        <Nav navbar>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/home\">\r\n                                    <span className=\"fa fa-home fa-lg\"></span>Home\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/aboutus\">\r\n                                    <span className=\"fa fa-info fa-lg\"></span>About Us\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/menu\">\r\n                                    <span className=\"fa fa-list fa-lg\"></span>Menu\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/contactus\">\r\n                                    <span className=\"fa fa-address-card fa-lg\"></span>Contact Us\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <Nav className=\"ml-auto\" navbar>\r\n                            <NavItem>\r\n                                <Button outline onClick={this.toggleModal}>\r\n                                    <span className=\"fa fa-sign-in fa-lg\" />Login\r\n                                </Button>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </Collapse>\r\n                </div>\r\n            </Navbar>\r\n            <Jumbotron>\r\n                <div className = \"container\">\r\n                    <div className = \"row row-header\">\r\n                        <div className = \"col-12 col-sm-6\">\r\n                            <h1>Ristorante Con Fusion</h1>\r\n                            <p>We take inspiration from the World's best cuisines, and create a unique fusion experience. Our lipsmacking creations will tickle your culinary senses!</p>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Jumbotron>\r\n            <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal} fade={false}>\r\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.handleLogin}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"username\">Username</Label>\r\n                                <Input type=\"text\" id=\"username\" name=\"username\" innerRef={(input) => this.username = input } />\r\n                            </FormGroup>\r\n\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"password\">Password</Label>\r\n                                <Input type=\"password\" id=\"password\" name=\"password\" innerRef={(input) => this.password = input } />\r\n                            </FormGroup>\r\n\r\n                            <FormGroup check>\r\n                                <Label check>\r\n                                    <Input type=\"checkbox\" name=\"remember\" innerRef={(input) => this.remember = input } />\r\n                                    Remember me\r\n                                </Label>\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Login</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\FooterComponent.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\HomeComponent.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\ContactComponent.js",["101","102","103","104","105","106","107","108","109"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Row, Label, Input, Col } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Contact extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    \r\n    handleSubmit(values) {\r\n        console.log('Current State is: ' + JSON.stringify(values));\r\n        alert('Current State is: ' + JSON.stringify(values));\r\n        // event.preventDefault();\r\n    }\r\n\r\n    render(){    \r\n        // const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email)\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">   \r\n                        <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                        <div className=\"col-12\">\r\n                            <h3>Contact Us</h3>\r\n                            <hr />\r\n                        </div>\r\n                    </div>\r\n            \r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                <h3>Location Information</h3>    \r\n                </div>\r\n                <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                    <h5>Our Address</h5>\r\n                    <address>\r\n                        121, Clear Water Bay Road<br />\r\n                        Clear Water Bay, Knoloon<br />\r\n                        HONG KONG<br />\r\n                        <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                        <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                        <i className=\"fa fa-envelope\"></i>:<a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                    </address>\r\n                </div>\r\n                <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                    <h5>Map of our Location</h5>\r\n                </div>\r\n                <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                    <div className=\"btn-group\" role=\"group\">\r\n                        <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i></a>\r\n                        <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                        <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i>Email</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                    <h3>Send us your feedback</h3>\r\n                </div>\r\n                <div className=\"col-12 col-md-9\">\r\n                <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                    <Row className=\"form-group\">\r\n                        <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                        <Col md={10}>\r\n                            <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                placeholder=\"First Name\"\r\n                                className=\"form-control\"\r\n                                validators={{\r\n                                    required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                }}\r\n                                />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model=\".firstname\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required',\r\n                                    minLength: 'Must be greater than 2 characters',\r\n                                    maxLength: 'Must be 15 characters or less'\r\n                                }}\r\n                            />    \r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row> \r\n\r\n\r\n                <Row className=\"form-group\">\r\n                        <Col md={{size: 6, offset: 2}}>\r\n                            <div className=\"form-check\">\r\n                                <Label check>\r\n                                    <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                        className=\"form-check-input\"\r\n                                        /> {' '}\r\n                                        <strong>May we contact you?</strong>\r\n                                </Label>\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={{size: 3, offset: 1}}>\r\n                            <Control.select model=\".contactType\" name=\"contactType\"\r\n                                className=\"form-control\">\r\n                                <option>Tel.</option>\r\n                                <option>Email</option>\r\n                            </Control.select>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"form-group\">\r\n                        <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                        <Col md={10}>\r\n                            <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                rows=\"12\"\r\n                                className=\"form-control\" />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"form-group\">\r\n                        <Col md={{size:10, offset: 2}}>\r\n                            <Button type=\"submit\" color=\"primary\">\r\n                            Send Feedback\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </LocalForm>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n        );\r\n    }\r\n}\r\nexport default Contact;","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\comments.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\leaders.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\promotions.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\AboutComponent.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\configureStore.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\leaders.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\dishes.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\promotions.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\comments.js",[],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":2,"column":41,"nodeType":"116","messageId":"117","endLine":2,"endColumn":49},{"ruleId":"114","severity":1,"message":"118","line":2,"column":51,"nodeType":"116","messageId":"117","endLine":2,"endColumn":59},{"ruleId":"114","severity":1,"message":"119","line":4,"column":25,"nodeType":"116","messageId":"117","endLine":4,"endColumn":30},{"ruleId":"120","severity":1,"message":"121","line":50,"column":25,"nodeType":"122","endLine":54,"endColumn":22},{"ruleId":"120","severity":1,"message":"123","line":68,"column":25,"nodeType":"122","endLine":79,"endColumn":23},{"ruleId":"120","severity":1,"message":"124","line":97,"column":21,"nodeType":"122","endLine":103,"endColumn":23},{"ruleId":"114","severity":1,"message":"125","line":207,"column":11,"nodeType":"116","messageId":"117","endLine":207,"endColumn":21},{"ruleId":"114","severity":1,"message":"126","line":5,"column":10,"nodeType":"116","messageId":"117","endLine":5,"endColumn":16},{"ruleId":"114","severity":1,"message":"127","line":5,"column":18,"nodeType":"116","messageId":"117","endLine":5,"endColumn":29},{"ruleId":"128","severity":1,"message":"129","line":24,"column":3,"nodeType":"130","messageId":"131","endLine":26,"endColumn":4},{"ruleId":"132","severity":1,"message":"133","line":49,"column":25,"nodeType":"122","endLine":50,"endColumn":59},{"ruleId":"114","severity":1,"message":"119","line":2,"column":58,"nodeType":"116","messageId":"117","endLine":2,"endColumn":63},{"ruleId":"134","severity":1,"message":"135","line":63,"column":25,"nodeType":"122","endLine":63,"endColumn":67},{"ruleId":"120","severity":1,"message":"123","line":77,"column":29,"nodeType":"122","endLine":83,"endColumn":35},{"ruleId":"120","severity":1,"message":"123","line":99,"column":37,"nodeType":"122","endLine":105,"endColumn":43},{"ruleId":"120","severity":1,"message":"123","line":121,"column":37,"nodeType":"122","endLine":127,"endColumn":43},{"ruleId":"120","severity":1,"message":"123","line":144,"column":37,"nodeType":"122","endLine":150,"endColumn":43},{"ruleId":"120","severity":1,"message":"136","line":168,"column":37,"nodeType":"122","endLine":170,"endColumn":43},{"ruleId":"120","severity":1,"message":"121","line":176,"column":29,"nodeType":"122","endLine":177,"endColumn":58},{"ruleId":"120","severity":1,"message":"124","line":186,"column":29,"nodeType":"122","endLine":188,"endColumn":60},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'CardText' is defined but never used.","Identifier","unusedVar","'CardBody' is defined but never used.","'Input' is defined but never used.","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'formatDate' is assigned a value but never used.","'Navbar' is defined but never used.","'NavbarBrand' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","no-global-assign","no-unsafe-negation"]