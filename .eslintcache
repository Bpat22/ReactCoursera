[{"C:\\Users\\binap\\Documents\\React\\confusion\\src\\index.js":"1","C:\\Users\\binap\\Documents\\React\\confusion\\src\\reportWebVitals.js":"2","C:\\Users\\binap\\Documents\\React\\confusion\\src\\App.js":"3","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\MenuComponent.js":"4","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\dishes.js":"5","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\DishdetailComponent.js":"6","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\MainComponent.js":"7","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\HeaderComponent.js":"8","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\FooterComponent.js":"9","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\HomeComponent.js":"10","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\ContactComponent.js":"11","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\comments.js":"12","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\leaders.js":"13","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\promotions.js":"14","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\AboutComponent.js":"15","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\configureStore.js":"16","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\leaders.js":"17","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\dishes.js":"18","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\promotions.js":"19","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\comments.js":"20","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\ActionCreaters.js":"21","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\ActionTypes.js":"22","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\LoadingComponent.js":"23","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\forms.js":"24","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\baseUrl.js":"25"},{"size":808,"mtime":1608492901881,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":541,"mtime":1610254834842,"results":"29","hashOfConfig":"27"},{"size":2433,"mtime":1610779155414,"results":"30","hashOfConfig":"27"},{"size":1490,"mtime":1608517792705,"results":"31","hashOfConfig":"27"},{"size":7362,"mtime":1610779713703,"results":"32","hashOfConfig":"27"},{"size":3403,"mtime":1610779426098,"results":"33","hashOfConfig":"27"},{"size":5326,"mtime":1610733666189,"results":"34","hashOfConfig":"27"},{"size":2707,"mtime":1608492937550,"results":"35","hashOfConfig":"27"},{"size":1621,"mtime":1610779660725,"results":"36","hashOfConfig":"27"},{"size":10536,"mtime":1610768452105,"results":"37","hashOfConfig":"27"},{"size":4310,"mtime":1608517960731,"results":"38","hashOfConfig":"27"},{"size":2382,"mtime":1608518105264,"results":"39","hashOfConfig":"27"},{"size":465,"mtime":1608518075218,"results":"40","hashOfConfig":"27"},{"size":4411,"mtime":1609447482203,"results":"41","hashOfConfig":"27"},{"size":793,"mtime":1610767565274,"results":"42","hashOfConfig":"27"},{"size":187,"mtime":1610679149880,"results":"43","hashOfConfig":"27"},{"size":612,"mtime":1610759582922,"results":"44","hashOfConfig":"27"},{"size":735,"mtime":1610778677569,"results":"45","hashOfConfig":"27"},{"size":786,"mtime":1610778552721,"results":"46","hashOfConfig":"27"},{"size":3350,"mtime":1610825848145,"results":"47","hashOfConfig":"27"},{"size":413,"mtime":1610776592169,"results":"48","hashOfConfig":"27"},{"size":256,"mtime":1610757913571,"results":"49","hashOfConfig":"27"},{"size":167,"mtime":1610767257053,"results":"50","hashOfConfig":"27"},{"size":98,"mtime":1610825650079,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1hzl0eu",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\binap\\Documents\\React\\confusion\\src\\index.js",[],["110","111"],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\reportWebVitals.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\App.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\MenuComponent.js",["112","113"],"import React,{} from 'react';\r\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n    function RenderMenuItem({ dish, onClick }){\r\n\r\n        return(\r\n            <Card>      \r\n                {/* 'back quat used */}\r\n                <Link to = {`/menu/${dish.id}`} > \r\n                <CardImg width=\"100%\" src={baseUrl + dish.image} alt={dish.name} />\r\n                <CardImgOverlay>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                </CardImgOverlay>                                    \r\n                </Link>\r\n            </Card>\r\n        );\r\n    }  \r\n\r\n    const Menu = (props) => {\r\n\r\n        const menu = props.dishes.dishes.map((dish) => {\r\n            return (\r\n                <div key={dish.id} className=\"col-12 col-md-5 m-1\">\r\n                    <RenderMenuItem dish={dish} />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        if (props.dishes.isLoading) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <Loading />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.dishes.errMess) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                            <h4>{props.dishes.errMess}</h4>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );            \r\n        }else \r\n\r\n        return ( \r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                    <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>Menu</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Menu</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {menu}\r\n                </div>\r\n            </div>\r\n        );        \r\n    }\r\n    \r\nexport default Menu;","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\dishes.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\DishdetailComponent.js",["114","115","116","117"],"import React, { Component } from 'react';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, \r\n    Modal, ModalBody, ModalHeader,\r\n    Button, Row, Label, Col, BreadcrumbItem, Breadcrumb } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\n\r\nfunction RenderDish({ dish }) {\r\n    return (\r\n        <div className=\"col-12 col-md-5 m-1\">\r\n        <Card>\r\n            <CardImg top src={baseUrl + dish.image} alt={dish.name} />\r\n            <CardBody>\r\n                <CardTitle>{dish.name}</CardTitle>\r\n                <CardText>{dish.description}</CardText>\r\n            </CardBody>\r\n        </Card>\r\n        </div>\r\n    );\r\n}    \r\n\r\n\r\nfunction RenderComments({ comments, addComment, dishId }) {\r\n    if (comments != null) {\r\n        return (\r\n        <div className=\"col-12 col-md-5 m-1\">\r\n            <h4>Comments</h4>\r\n            <ul className=\"list-unstyled\">\r\n                {comments.map((comment) => {\r\n                    return (\r\n                <li className=\"mb-2\">\r\n                    <p>{comment.comment}</p>\r\n                    <p>-- {comment.author},{new Intl.DateTimeFormat(\"en-US\", {\r\n                        year: \"numeric\",month: \"short\",day: \"2-digit\"})\r\n                        .format(new Date(Date.parse(comment.date)))}</p>                \r\n                </li>\r\n                );\r\n                    })}\r\n            </ul>\r\n            <CommentForm  dishId={dishId} addComment={addComment} />\r\n        </div>\r\n        );\r\n    } else \r\n        return (\r\n            <div></div>\r\n    );\r\n} \r\n\r\nclass CommentForm extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n        this.state = { \r\n            isNavOpen: false,\r\n            isModalOpen: false \r\n            \r\n        };\r\n\r\n    }\r\n\r\n    toggleModal() {\r\n        this.setState({ isModalOpen: !this.state.isModalOpen });\r\n    }\r\n\r\n    handleSubmit(values){\r\n        this.toggleModal();\r\n        this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <Button outline onClick={this.toggleModal}>\r\n                <span className=\"fa fa-pencil\" /> Submit Comment\r\n            </Button>\r\n            <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                <ModalBody>\r\n                <LocalForm onSubmit={this.handleSubmit}>\r\n                    <Row className=\"form-group\">\r\n                    <Label htmlFor=\"rating\" md={12}>Rating</Label>\r\n                    <Col md={{ size: 12 }}>\r\n                        <Control.select model=\".rating\" name=\"rating\" className=\"form-control\">\r\n                        <option>1</option>\r\n                        <option>2</option>\r\n                        <option>3</option>\r\n                        <option>4</option>\r\n                        <option>5</option>\r\n                    </Control.select>\r\n                    </Col>\r\n                    </Row>\r\n                    <Row className=\"form-group\">\r\n                    <Label htmlFor=\"author\" md={12}>Your Name</Label>\r\n                    <Col md={12}>\r\n                        <Control.text\r\n                        model=\".author\"\r\n                        id=\"author\"\r\n                        name=\"author\"\r\n                        placeholder=\"Your Name\"\r\n                        className=\"form-control\"\r\n                        validators={{\r\n                            required,\r\n                            minLength: minLength(3),\r\n                            maxLength: maxLength(15)\r\n                        }}\r\n                    />\r\n                    <Errors\r\n                        className=\"text-danger\"\r\n                        model=\".author\"\r\n                        show=\"touched\"\r\n                        messages={{\r\n                            required: \"Required\",\r\n                            minLength: \"Must be greater than 2 characters\",\r\n                            maxLength: \"Must be 15 characters or less\"\r\n                        }}\r\n                    />\r\n                    </Col>\r\n                    </Row>\r\n                    <Row className=\"form-group\">\r\n                    <Label htmlFor=\"comment\" md={12}>\r\n                        Comment\r\n                    </Label>\r\n                    <Col md={12}>\r\n                    <Control.textarea\r\n                        model=\".comment\"\r\n                        id=\"comment\"\r\n                        name=\"comment\"\r\n                        rows={5}\r\n                        className=\"form-control\"\r\n                    />\r\n                    </Col>\r\n                    </Row>\r\n                        <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                            Submit\r\n                        </Button>\r\n                </LocalForm>\r\n            </ModalBody>\r\n            </Modal>\r\n        </div>\r\n        );\r\n        }\r\n    }    \r\n\r\n\r\n    const DishDetail = (props) => {\r\n        if(props.isLoading) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <Loading />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.errMess) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <h4>{props.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            );            \r\n        }\r\n\r\n        if (props.dish != null)\r\n        return(\r\n            <div class=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <RenderDish dish={props.dish} />\r\n                    <RenderComments comments={props.comments} \r\n                        addComment = {props.addComment}\r\n                        dishId = {props.dish.id}\r\n                        />\r\n                </div>    \r\n            </div>\r\n        );\r\n        else\r\n        return(\r\n            <div></div>\r\n        );\r\n    }\r\n\r\n    const formatDate = (date) => {\r\n        const option = {year: 'numeric', month: 'short', day: 'numeric' };\r\n        const dateD = new Date(date)\r\n        const newDate = dateD.toLocaleDateString(\"en-US\", option)\r\n        return newDate;\r\n    }\r\n\r\n    export default DishDetail;\r\n\r\n","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\MainComponent.js",["118","119","120"],"import { Component } from 'react';\r\nimport Home from './HomeComponent';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport { Navbar, NavbarBrand } from 'reactstrap';\r\nimport Menu from './MenuComponent';\r\nimport Contact from './ContactComponent';\r\nimport DishDetail from './DishdetailComponent'\r\nimport About from './AboutComponent';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { addComment, fetchDishes, fetchComments, fetchPromos } from '../redux/ActionCreaters';\r\nimport { actions } from 'react-redux-form';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    dishes: state.dishes,\r\n    comments: state.comments,\r\n    promotions: state.promotions,\r\n    leaders: state.leaders\r\n  }\r\n}\r\n\r\nconst mapDispachToProps =  (dispatch) => ({\r\n  addComment: (dishId, rating, author ,comment) => dispatch(addComment(dishId, rating, author ,comment)),\r\n  fetchDishes: () => {dispatch(fetchDishes())},\r\n  resetFeedbackForm: () => { dispatch(actions.reset('feedback'))},\r\n  fetchComments: () => dispatch(fetchComments()),\r\n  fetchPromos: () => dispatch(fetchPromos())\r\n});\r\n\r\nclass Main extends Component {\r\n  constructor(props){\r\n    super(props);    \r\n  }  \r\n\r\n  componentDidMount(){\r\n    this.props.fetchDishes();\r\n    this.props.fetchComments();\r\n    this.props.fetchPromos();\r\n  }\r\n\r\n  render(){\r\n    const HomePage = () =>{\r\n      return(\r\n          <Home \r\n              dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\r\n              dishesLoading={this.props.dishes.isLoading}\r\n              dishesErrMess={this.props.dishes.errMess}\r\n              promotion={this.props.promotions.promotions.filter((promo) => promo.featured)[0]}\r\n              promosLoading={this.props.promotions.isLoading}\r\n              promosErrMess={this.props.promotions.errMess}\r\n              leader={this.props.leaders.filter((leader) => leader.featured)[0]}\r\n          />\r\n      );\r\n    }\r\n\r\n    const DishWithID = ({match}) => {\r\n      return(\r\n        <DishDetail dish = {this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]}\r\n          isLoading={this.props.dishes.isLoading}\r\n          errMess={this.props.dishes.errMess}        \r\n          comments={this.props.comments.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))}\r\n          commentsErrMess={this.props.comments.errMess}\r\n          addComment={this.props.addComment}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <Header />\r\n          <Switch>\r\n            <Route path = \"/home\" component={HomePage} />\r\n            <Route path = \"/aboutus\" component={() => <About leaders={this.props.leaders} />} />\r\n            <Route exact path = \"/menu\" component={() => <Menu dishes={this.props.dishes} />} />\r\n            <Route path = \"/menu/:dishId\" component={DishWithID} />\r\n            <Route exact path='/contactus' component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} />} />            \r\n            {/* <Route exact path = \"/contactus\" component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} /> } /> */}\r\n            <Redirect to = \"/home\" />\r\n          </Switch>        \r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispachToProps)(Main));","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\HeaderComponent.js",["121"],"import React, { Component} from 'react';\r\nimport { Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem, Jumbotron,\r\n    Button, Modal, ModalHeader, ModalBody,\r\n    Form, FormGroup, Input, Label} from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n\r\n    constructor(props){\r\n        \r\n        super(props);\r\n        this.state ={\r\n            isNavOpen: false,\r\n            isModalOpen: false\r\n        };\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n    }\r\n\r\n    toggleNav(){\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    toggleModal(){\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleLogin(event) {\r\n        this.toggleModal();\r\n        alert(\"Username: \" + this.username.value + \" Password: \" + this.password.value\r\n            + \" Remember: \" + this.remember.checked);\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n            <Navbar dark expand=\"md\">\r\n                <div className=\"container\">\r\n                    <NavbarToggler onClick={this.toggleNav} />\r\n\r\n                    <NavbarBrand className =\"mr-auto\" href=\"/\">\r\n                        <img src = \"assets/images/logo.png\" height=\"30\" width=\"41\" atl=\"Ristorante Con Fusion\" />\r\n                    </NavbarBrand>\r\n\r\n                    <Collapse isOpen={this.state.isNavOpen} navbar>\r\n                        <Nav navbar>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/home\">\r\n                                    <span className=\"fa fa-home fa-lg\"></span>Home\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/aboutus\">\r\n                                    <span className=\"fa fa-info fa-lg\"></span>About Us\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/menu\">\r\n                                    <span className=\"fa fa-list fa-lg\"></span>Menu\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/contactus\">\r\n                                    <span className=\"fa fa-address-card fa-lg\"></span>Contact Us\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <Nav className=\"ml-auto\" navbar>\r\n                            <NavItem>\r\n                                <Button outline onClick={this.toggleModal}>\r\n                                    <span className=\"fa fa-sign-in fa-lg\" />Login\r\n                                </Button>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </Collapse>\r\n                </div>\r\n            </Navbar>\r\n            <Jumbotron>\r\n                <div className = \"container\">\r\n                    <div className = \"row row-header\">\r\n                        <div className = \"col-12 col-sm-6\">\r\n                            <h1>Ristorante Con Fusion</h1>\r\n                            <p>We take inspiration from the World's best cuisines, and create a unique fusion experience. Our lipsmacking creations will tickle your culinary senses!</p>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Jumbotron>\r\n            <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal} fade={false}>\r\n                    <ModalHeader toggle={this.toggleModal}>Login</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.handleLogin}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"username\">Username</Label>\r\n                                <Input type=\"text\" id=\"username\" name=\"username\" innerRef={(input) => this.username = input } />\r\n                            </FormGroup>\r\n\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"password\">Password</Label>\r\n                                <Input type=\"password\" id=\"password\" name=\"password\" innerRef={(input) => this.password = input } />\r\n                            </FormGroup>\r\n\r\n                            <FormGroup check>\r\n                                <Label check>\r\n                                    <Input type=\"checkbox\" name=\"remember\" innerRef={(input) => this.remember = input } />\r\n                                    Remember me\r\n                                </Label>\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\" onClick={this.handleLogin}>Login</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\FooterComponent.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\HomeComponent.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\ContactComponent.js",["122","123","124","125","126","127","128","129","130","131","132"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Row, Label, Input, Col } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Form, Errors, actions } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Contact extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    \r\n    handleSubmit(values) {\r\n        console.log('Current State is: ' + JSON.stringify(values));\r\n        alert('Current State is: ' + JSON.stringify(values));\r\n        this.props.resetFeedbackForm();\r\n        // event.preventDefault();\r\n    }\r\n\r\n    render(){    \r\n        // const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email)\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">   \r\n                        <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                        <div className=\"col-12\">\r\n                            <h3>Contact Us</h3>\r\n                            <hr />\r\n                        </div>\r\n                    </div>\r\n            \r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                <h3>Location Information</h3>    \r\n                </div>\r\n                <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                    <h5>Our Address</h5>\r\n                    <address>\r\n                        121, Clear Water Bay Road<br />\r\n                        Clear Water Bay, Knoloon<br />\r\n                        HONG KONG<br />\r\n                        <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                        <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                        <i className=\"fa fa-envelope\"></i>:<a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                    </address>\r\n                </div>\r\n                <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                    <h5>Map of our Location</h5>\r\n                </div>\r\n                <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                    <div className=\"btn-group\" role=\"group\">\r\n                        <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i></a>\r\n                        <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                        <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i>Email</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                    <h3>Send us your feedback</h3>\r\n                </div>\r\n                <div className=\"col-12 col-md-9\">\r\n                <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                    <Row className=\"form-group\">\r\n                        <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                        <Col md={10}>\r\n                            <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                placeholder=\"First Name\"\r\n                                className=\"form-control\"\r\n                                validators={{\r\n                                    required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                }}\r\n                                />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model=\".firstname\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required',\r\n                                    minLength: 'Must be greater than 2 characters',\r\n                                    maxLength: 'Must be 15 characters or less'\r\n                                }}\r\n                            />    \r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                        />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row> \r\n\r\n\r\n                <Row className=\"form-group\">\r\n                        <Col md={{size: 6, offset: 2}}>\r\n                            <div className=\"form-check\">\r\n                                <Label check>\r\n                                    <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                        className=\"form-check-input\"\r\n                                        /> {' '}\r\n                                        <strong>May we contact you?</strong>\r\n                                </Label>\r\n                            </div>\r\n                        </Col>\r\n                        <Col md={{size: 3, offset: 1}}>\r\n                            <Control.select model=\".contactType\" name=\"contactType\"\r\n                                className=\"form-control\">\r\n                                <option>Tel.</option>\r\n                                <option>Email</option>\r\n                            </Control.select>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"form-group\">\r\n                        <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                        <Col md={10}>\r\n                            <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                rows=\"12\"\r\n                                className=\"form-control\" />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"form-group\">\r\n                        <Col md={{size:10, offset: 2}}>\r\n                            <Button type=\"submit\" color=\"primary\">\r\n                            Send Feedback\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n        );\r\n    }\r\n}\r\nexport default Contact;","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\comments.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\leaders.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\promotions.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\AboutComponent.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\configureStore.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\leaders.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\dishes.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\promotions.js",["133"],"import { PROMOTIONS } from '../shared/promotions';\r\nimport * as ActionTypes from './ActionTypes';\r\n\r\nexport const Promotions = (state  = { isLoading: true,\r\n                                        errMess: null,\r\n                                        promotions:[]}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_PROMOS:\r\n        return {...state, isLoading: false, errMess: null, promotions: action.payload};\r\n\r\n        case ActionTypes.PROMOS_LOADING:\r\n            return {...state, isLoading: true, errMess: null, promotions: []}\r\n\r\n        case ActionTypes.PROMOS_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\comments.js",["134"],"import { COMMENTS } from '../shared/comments';\r\nimport * as ActionTypes from './ActionTypes';\r\n\r\nexport const Comments = (state = {\r\n    errMess: null,\r\n    comments: []\r\n}, action) => {\r\n\r\n    switch(action.type) {\r\n        case ActionTypes.ADD_COMMENTS:\r\n            return {...state, isLoading: false, errMess: null, comments: action.payload};\r\n\r\n        case ActionTypes.COMMENTS_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload};  \r\n\r\n        case ActionTypes.ADD_COMMENT:\r\n            var comment = action.payload;\r\n            comment.id = state.comments.length;\r\n            comment.date = new Date().toISOString();\r\n            return {...state, comments: state.comments.concat(comment)};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\ActionCreaters.js",["135"],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\ActionTypes.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\LoadingComponent.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\forms.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\baseUrl.js",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":2,"column":41,"nodeType":"142","messageId":"143","endLine":2,"endColumn":49},{"ruleId":"140","severity":1,"message":"144","line":2,"column":51,"nodeType":"142","messageId":"143","endLine":2,"endColumn":59},{"ruleId":"145","severity":1,"message":"146","line":96,"column":25,"nodeType":"147","endLine":96,"endColumn":96},{"ruleId":"145","severity":1,"message":"148","line":108,"column":25,"nodeType":"147","endLine":119,"endColumn":23},{"ruleId":"145","severity":1,"message":"149","line":137,"column":21,"nodeType":"147","endLine":143,"endColumn":23},{"ruleId":"140","severity":1,"message":"150","line":206,"column":11,"nodeType":"142","messageId":"143","endLine":206,"endColumn":21},{"ruleId":"140","severity":1,"message":"151","line":5,"column":10,"nodeType":"142","messageId":"143","endLine":5,"endColumn":16},{"ruleId":"140","severity":1,"message":"152","line":5,"column":18,"nodeType":"142","messageId":"143","endLine":5,"endColumn":29},{"ruleId":"153","severity":1,"message":"154","line":33,"column":3,"nodeType":"155","messageId":"156","endLine":35,"endColumn":4},{"ruleId":"157","severity":1,"message":"158","line":49,"column":25,"nodeType":"147","endLine":49,"endColumn":114},{"ruleId":"140","severity":1,"message":"159","line":2,"column":58,"nodeType":"142","messageId":"143","endLine":2,"endColumn":63},{"ruleId":"140","severity":1,"message":"160","line":4,"column":19,"nodeType":"142","messageId":"143","endLine":4,"endColumn":28},{"ruleId":"140","severity":1,"message":"161","line":4,"column":44,"nodeType":"142","messageId":"143","endLine":4,"endColumn":51},{"ruleId":"162","severity":1,"message":"163","line":64,"column":25,"nodeType":"147","endLine":64,"endColumn":67},{"ruleId":"145","severity":1,"message":"148","line":78,"column":29,"nodeType":"147","endLine":84,"endColumn":35},{"ruleId":"145","severity":1,"message":"148","line":100,"column":37,"nodeType":"147","endLine":106,"endColumn":43},{"ruleId":"145","severity":1,"message":"148","line":122,"column":37,"nodeType":"147","endLine":128,"endColumn":43},{"ruleId":"145","severity":1,"message":"148","line":145,"column":37,"nodeType":"147","endLine":151,"endColumn":43},{"ruleId":"145","severity":1,"message":"164","line":169,"column":37,"nodeType":"147","endLine":171,"endColumn":43},{"ruleId":"145","severity":1,"message":"146","line":177,"column":29,"nodeType":"147","endLine":178,"endColumn":58},{"ruleId":"145","severity":1,"message":"149","line":187,"column":29,"nodeType":"147","endLine":189,"endColumn":60},{"ruleId":"140","severity":1,"message":"165","line":1,"column":10,"nodeType":"142","messageId":"143","endLine":1,"endColumn":20},{"ruleId":"140","severity":1,"message":"166","line":1,"column":10,"nodeType":"142","messageId":"143","endLine":1,"endColumn":18},{"ruleId":"140","severity":1,"message":"167","line":2,"column":10,"nodeType":"142","messageId":"143","endLine":2,"endColumn":16},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'CardText' is defined but never used.","Identifier","unusedVar","'CardBody' is defined but never used.","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'formatDate' is assigned a value but never used.","'Navbar' is defined but never used.","'NavbarBrand' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Input' is defined but never used.","'LocalForm' is defined but never used.","'actions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","'PROMOTIONS' is defined but never used.","'COMMENTS' is defined but never used.","'DISHES' is defined but never used.","no-global-assign","no-unsafe-negation"]