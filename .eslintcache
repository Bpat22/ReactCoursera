[{"C:\\Users\\binap\\Documents\\React\\confusion\\src\\index.js":"1","C:\\Users\\binap\\Documents\\React\\confusion\\src\\reportWebVitals.js":"2","C:\\Users\\binap\\Documents\\React\\confusion\\src\\App.js":"3","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\MenuComponent.js":"4","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\dishes.js":"5","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\DishdetailComponent.js":"6","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\MainComponent.js":"7","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\HeaderComponent.js":"8","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\FooterComponent.js":"9","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\HomeComponent.js":"10","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\ContactComponent.js":"11","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\comments.js":"12","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\leaders.js":"13","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\promotions.js":"14","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\AboutComponent.js":"15","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\configureStore.js":"16","C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\reducer.js":"17"},{"size":808,"mtime":1608492901881,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":541,"mtime":1610254834842,"results":"21","hashOfConfig":"19"},{"size":2246,"mtime":1608596917005,"results":"22","hashOfConfig":"19"},{"size":1490,"mtime":1608517792705,"results":"23","hashOfConfig":"19"},{"size":2665,"mtime":1609447464985,"results":"24","hashOfConfig":"19"},{"size":2060,"mtime":1610255057927,"results":"25","hashOfConfig":"19"},{"size":5349,"mtime":1610250228022,"results":"26","hashOfConfig":"19"},{"size":2707,"mtime":1608492937550,"results":"27","hashOfConfig":"19"},{"size":1767,"mtime":1608521110514,"results":"28","hashOfConfig":"19"},{"size":10767,"mtime":1610226207846,"results":"29","hashOfConfig":"19"},{"size":4310,"mtime":1608517960731,"results":"30","hashOfConfig":"19"},{"size":2382,"mtime":1608518105264,"results":"31","hashOfConfig":"19"},{"size":465,"mtime":1608518075218,"results":"32","hashOfConfig":"19"},{"size":4411,"mtime":1609447482203,"results":"33","hashOfConfig":"19"},{"size":266,"mtime":1610254739572,"results":"34","hashOfConfig":"19"},{"size":407,"mtime":1610254832103,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"nwyqho",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\binap\\Documents\\React\\confusion\\src\\index.js",[],["75","76"],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\reportWebVitals.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\App.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\MenuComponent.js",["77","78"],"import React,{} from 'react';\r\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n    function RenderMenuItem({ dish, onClick }){\r\n\r\n        return(\r\n            <Card>      \r\n                {/* 'back quat used */}\r\n                <Link to = {`/menu/${dish.id}`} > \r\n                <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\r\n                <CardImgOverlay>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                </CardImgOverlay>                                    \r\n                </Link>\r\n            </Card>\r\n        );\r\n    }  \r\n\r\n    const Menu = (props) => {\r\n\r\n        const menu = props.dishes.map((dish) => {\r\n            return (\r\n                <div key={dish.id} className=\"col-12 col-md-5 m-1\">\r\n                    <RenderMenuItem dish={dish} />\r\n                </div>\r\n            );\r\n        });\r\n\r\n        console.log('Menu Component render is invonked');\r\n\r\n        return ( \r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                    <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>Menu</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Menu</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {menu}\r\n                </div>\r\n                              \r\n            </div>\r\n        );        \r\n    }\r\n     \r\n// applying router\r\n//    function RenderMenuItem({ dish, onClick}){\r\n//       <Card onClick={() => onClick(dish.id)}>      \r\n    \r\n//Changing into functional component\r\n//class Menu extends Component {\r\n    // componentDidMount(){\r\n    //     console.log('Menu Component componentDidMount invoked')\r\n    // }\r\n    // constructor(props){\r\n    //     super(props);\r\n\r\n    //     console.log('Menu Componenet constructor is invonked');\r\n    // }\r\n   \r\n    //render(){\r\n\r\n    //}\r\n//}\r\n\r\nexport default Menu;","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\dishes.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\DishdetailComponent.js",["79"],"import React from 'react';\r\nimport { Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle, BreadcrumbItem, Breadcrumb } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n    function RenderDish ({dish}) {\r\n        return(\r\n            <div className=\"col-12 col-md-5 m-1\">\r\n                <Card>\r\n                    <CardImg width=\"100%\" top src={dish.image} atl={dish.name} />\r\n                    <CardBody>\r\n                        <CardTitle>{dish.name}</CardTitle>\r\n                        <CardText>{dish.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    function RenderComments ({comments}){\r\n        //const RenderComments = (comments) => {\r\n        if (comments != null)\r\n\r\n        return(\r\n            <React.Fragment>\r\n            <div className=\"col-12 col-md-5 m-1\">\r\n                <h4>Comments</h4>\r\n                <ul className = \"list-unstyled\">\r\n                    {comments.map((comment) => {\r\n                        return (\r\n                            <li key={comment.id}>\r\n                            <p>{comment.comment}</p> \r\n                            <p>--{comment.author}, {formatDate(comment.date)}</p>   \r\n                            </li>\r\n                        );                    \r\n                    })}\r\n                </ul>\r\n            </div>\r\n            </React.Fragment>\r\n        );\r\n        else\r\n            return(\r\n            <div></div>\r\n            );         \r\n    }\r\n\r\n    const DishDetail = (props) => {\r\n        if (props.dish != null)\r\n        return(\r\n            <div class=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                    <BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <RenderDish dish={props.dish} />\r\n                    <RenderComments comments={props.comments} />\r\n                </div>    \r\n            </div>\r\n        );\r\n    }\r\n\r\n    const formatDate = (date) => {\r\n        const option = {year: 'numeric', month: 'short', day: 'numeric' };\r\n        const dateD = new Date(date)\r\n        const newDate = dateD.toLocaleDateString(\"en-US\", option)\r\n        return newDate;\r\n    }\r\n\r\n    export default DishDetail;","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\MainComponent.js",["80","81","82"],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\HeaderComponent.js",["83"],"import React, { Component} from 'react';\r\nimport { Navbar, NavbarBrand, Nav, NavbarToggler, Collapse, NavItem, Jumbotron,\r\n    Button, Modal, ModalHeader, ModalBody,\r\n    Form, FormGroup, Input, Label} from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n\r\n    constructor(props){\r\n        \r\n        super(props);\r\n        this.state ={\r\n            isNavOpen: false,\r\n            isModalOpen: false\r\n        };\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n    }\r\n\r\n    toggleNav(){\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    toggleModal(){\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n\r\n    handleLogin(event) {\r\n        this.toggleModal();\r\n        alert(\"Username: \" + this.username.value + \" Password: \" + this.password.value\r\n            + \" Remember: \" + this.remember.checked);\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n            <Navbar dark expand=\"md\">\r\n                <div className=\"container\">\r\n                    <NavbarToggler onClick={this.toggleNav} />\r\n\r\n                    <NavbarBrand className =\"mr-auto\" href=\"/\">\r\n                        <img src = \"assets/images/logo.png\" height=\"30\" width=\"41\"\r\n                            atl=\"Ristorante Con Fusion\" />\r\n                    </NavbarBrand>\r\n\r\n                    <Collapse isOpen={this.state.isNavOpen} navbar>\r\n                        <Nav navbar>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/home\">\r\n                                    <span className=\"fa fa-home fa-lg\"></span>Home\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/aboutus\">\r\n                                    <span className=\"fa fa-info fa-lg\"></span>About Us\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/menu\">\r\n                                    <span className=\"fa fa-list fa-lg\"></span>Menu\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/contactus\">\r\n                                    <span className=\"fa fa-address-card fa-lg\"></span>Contact Us\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                                <NavItem>\r\n                                    <Button outline onClick={this.toggleModal}>\r\n                                        <span className=\"fa fa-sign-in fa-lg\">Login</span>\r\n                                    </Button>\r\n                                </NavItem>\r\n                            </Nav>\r\n                    </Collapse>\r\n                </div>\r\n            </Navbar>\r\n            <Jumbotron>\r\n                <div className = \"container\">\r\n                    <div className = \"row row-header\">\r\n                        <div className = \"col-12 col-sm-6\">\r\n                            <h1>Ristorante Con Fusion</h1>\r\n                            <p>We take inspiration from the World's best cuisines, and create a unique fusion experience. Our lipsmacking creations will tickle your culinary senses!</p>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Jumbotron>\r\n            <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}> Login</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.handleLogin}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"username\">Username</Label>\r\n                                <Input type=\"text\" id=\"username\" name=\"username\" innerRef={(input) => this.username = input } />\r\n                            </FormGroup>\r\n\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"password\">Password</Label>\r\n                                <Input type=\"password\" id=\"password\" name=\"password\" innerRef={(input) => this.password = input } />\r\n                            </FormGroup>\r\n\r\n                            <FormGroup check>\r\n                                <Label check>\r\n                                    <Input type=\"checkbox\" name=\"remember\" innerRef={(input) => this.remember = input } />\r\n                                    Remember me\r\n                                </Label>\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" value=\"submit\" color=\"primary\">Login</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\FooterComponent.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\HomeComponent.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\ContactComponent.js",["84","85"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Contact extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            firstname: '',\r\n            lastname: '',\r\n            telnum: '',\r\n            email: '',\r\n            agree: false,\r\n            contactType: 'Tel',\r\n            message: '',\r\n            touched: {\r\n                firstname: false,\r\n                lastname: false,\r\n                telnum: false,\r\n                email:false\r\n            }\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleBlur = this.handleBlur.bind(this);\r\n    }\r\n\r\n    handleBlur = (field) => (Event) => {\r\n        this.setState ({\r\n            touched: {...this.state.touched, [field]: true}\r\n        })\r\n    }\r\n\r\n    validate(firstname,lastname,telnum,email){\r\n        const errors = {\r\n            firstname: '',\r\n            lastname: '',\r\n            telnum: '',\r\n            email: ''\r\n        };\r\n        if (this.state.touched.firstname && firstname.length < 3)\r\n            errors.firstname = 'First name should be at least 3 characters';\r\n        else if (this.state.touched.firstname && firstname.length >10)\r\n            errors.firstname = 'First name should be less than 10 characters';\r\n\r\n        if (this.state.touched.lastname && lastname.length < 3)\r\n            errors.lastname = 'Last name should be at least 3 characters';\r\n        else if (this.state.touched.lastname && lastname.length >10)\r\n            errors.lastname = 'Last name should be less than 10 characters';\r\n            \r\n        const reg = /^\\d+$/;\r\n        if (this.state.touched.telnum && !reg.test(telnum))\r\n            errors.telnum = 'Telephone number should be numbers only';\r\n        else if (this.state.touched.telnum && telnum.length != 10)\r\n            errors.telnum = 'telephone number should be 10 digits';\r\n\r\n        if (this.state.touched.email && email.split('').filter(x => x === '@').length !==1)\r\n            errors.email = 'Email must contain @';\r\n        else if (this.state.touched.email && email.split('').filter(x => x === '.').length !==1)\r\n            errors.email = 'Email must contain .';\r\n        \r\n        return errors;\r\n    }\r\n\r\n    handleInputChange(event){\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n    handleSubmit(event){\r\n        console.log(\"Current state is: \" + JSON.stringify(this.state));\r\n        alert(\"Current state is: \" + JSON.stringify(this.state));\r\n        event.preventDefault();\r\n        \r\n    }\r\n\r\n    render(){    \r\n        const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email)\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">   \r\n                        <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                        <div className=\"col-12\">\r\n                            <h3>Contact Us</h3>\r\n                            <hr />\r\n                        </div>\r\n                    </div>\r\n            \r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                <h3>Location Information</h3>    \r\n                </div>\r\n                <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                    <h5>Our Address</h5>\r\n                    <address>\r\n                        121, Clear Water Bay Road<br />\r\n                        Clear Water Bay, Knoloon<br />\r\n                        HONG KONG<br />\r\n                        <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                        <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                        <i className=\"fa fa-envelope\"></i>:<a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                    </address>\r\n                </div>\r\n                <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                    <h5>Map of our Location</h5>\r\n                </div>\r\n                <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                    <div className=\"btn-group\" role=\"group\">\r\n                        <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i></a>\r\n                        <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                        <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i>Email</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                    <h3>Send us your feedback</h3>\r\n                </div>\r\n                <div className=\"col-12 col-md-9\">\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <FormGroup row>\r\n                            <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                            <Col md={10}>\r\n                                <Input type=\"text\" id=\"firstname\" name=\"firstname\" \r\n                                    placeholder=\"First Name\"\r\n                                    value={this.state.firstname} \r\n                                    valid={errors.firstname === ''}\r\n                                    invalid={errors.firstname !== ''}\r\n                                    onBlur={this.handleBlur('firstname')}\r\n                                    onChange={this.handleInputChange} />\r\n                                <FormFeedback>{errors.firstname}</FormFeedback>\r\n                            </Col>\r\n                        </FormGroup>\r\n                        <FormGroup row>\r\n                            <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                            <Col md={10}>\r\n                                <Input type=\"text\" id=\"lastname\" name=\"lastname\" \r\n                                    placeholder=\"last Name\"\r\n                                    value={this.state.lastname} \r\n                                    valid={errors.lastname === ''}\r\n                                    invalid={errors.lastname !== ''}\r\n                                    onBlur={this.handleBlur('lastname')}\r\n                                    onChange={this.handleInputChange} />\r\n                                <FormFeedback>{errors.lastname}</FormFeedback>\r\n                            </Col>\r\n                        </FormGroup>\r\n                        <FormGroup row>\r\n                            <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                            <Col md={10}>\r\n                                <Input type=\"tel\" id=\"telnum\" name=\"telnum\"\r\n                                    placeholder=\"Tel. number\"\r\n                                    value={this.state.telnum}\r\n                                    valid={errors.telnum === ''}\r\n                                    invalid={errors.telnum !== ''}\r\n                                    onBlur={this.handleBlur('telnum')}\r\n                                    onChange={this.handleInputChange} />\r\n                                <FormFeedback>{errors.telnum}</FormFeedback>\r\n                            </Col>\r\n                        </FormGroup>\r\n                        <FormGroup row>\r\n                            <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                            <Col md={10}>\r\n                                <Input type=\"email\" id=\"email\" name=\"email\"\r\n                                    placeholder=\"Email\"\r\n                                    value={this.state.email}\r\n                                    valid={errors.email === ''}\r\n                                    invalid={errors.email !== ''}\r\n                                    onBlur={this.handleBlur('email')}\r\n                                    onChange={this.handleInputChange} />\r\n                                <FormFeedback>{errors.email}</FormFeedback>\r\n                            </Col>\r\n                        </FormGroup>        \r\n                        <FormGroup row>\r\n                            <Col md={{size: 6, offset: 2}}>\r\n                                <FormGroup check>\r\n                                    <Label check>\r\n                                        <Input type=\"checkbox\" name=\"agree\"\r\n                                        checked={this.state.agree} \r\n                                        onChange={this.handleInputChange} /> {' '}\r\n                                        <strong>May we contact you?</strong>\r\n                                    </Label>\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md={{size: 3, offset: 1}}>\r\n                                <Input type=\"select\" name=\"contactType\"\r\n                                value={this.state.contactType} \r\n                                onChange={this.handleInputChange} >\r\n                                <option>TelNum</option>\r\n                                <option>Email</option>\r\n                                </Input>\r\n                            </Col>\r\n                        </FormGroup>\r\n                        <FormGroup row>\r\n                            <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                            <Col md={10}>\r\n                                <Input type=\"textarea\" id=\"message\" name=\"message\"\r\n                                rows=\"12\"\r\n                                value={this.state.message}\r\n                                onChange={this.handleInputChange} />\r\n                            </Col>\r\n                        </FormGroup>                \r\n                        <FormGroup row>\r\n                            <Col md={{size:10, offset:2}}>\r\n                                <Button type=\"submit\" color=\"primary\">\r\n                                    Send Feedback\r\n                                </Button>\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n        );\r\n    }\r\n}\r\nexport default Contact;","C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\comments.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\leaders.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\shared\\promotions.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\components\\AboutComponent.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\configureStore.js",[],"C:\\Users\\binap\\Documents\\React\\confusion\\src\\redux\\reducer.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":2,"column":41,"nodeType":"92","messageId":"93","endLine":2,"endColumn":49},{"ruleId":"90","severity":1,"message":"94","line":2,"column":51,"nodeType":"92","messageId":"93","endLine":2,"endColumn":59},{"ruleId":"90","severity":1,"message":"95","line":2,"column":25,"nodeType":"92","messageId":"93","endLine":2,"endColumn":39},{"ruleId":"90","severity":1,"message":"96","line":5,"column":10,"nodeType":"92","messageId":"93","endLine":5,"endColumn":16},{"ruleId":"90","severity":1,"message":"97","line":5,"column":18,"nodeType":"92","messageId":"93","endLine":5,"endColumn":29},{"ruleId":"98","severity":1,"message":"99","line":24,"column":3,"nodeType":"100","messageId":"101","endLine":26,"endColumn":4},{"ruleId":"102","severity":1,"message":"103","line":49,"column":25,"nodeType":"104","endLine":50,"endColumn":59},{"ruleId":"105","severity":1,"message":"106","line":56,"column":61,"nodeType":"107","messageId":"108","endLine":56,"endColumn":63},{"ruleId":"109","severity":1,"message":"110","line":119,"column":25,"nodeType":"104","endLine":119,"endColumn":67},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'CardText' is defined but never used.","Identifier","unusedVar","'CardBody' is defined but never used.","'CardImgOverlay' is defined but never used.","'Navbar' is defined but never used.","'NavbarBrand' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]